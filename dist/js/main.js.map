{"version":3,"names":[],"mappings":"","sources":["main.js"],"sourcesContent":["// Global Variables\r\nconst header = document.querySelector('[data-header]');\r\nconst nav = document.querySelector('[data-nav]');\r\nconst main = document.querySelector('[data-main]');\r\nconst selectionModal = document.querySelector('[data-modal-selection]');\r\nconst form = document.querySelector('[data-form]');\r\nconst reward = {\r\n  item: null,\r\n  container: null,\r\n  content: null,\r\n  contentHeight: 0,\r\n  previousFocused: null,\r\n};\r\nconst observer = new ResizeObserver(verifyContentResize);\r\nconst focusable = {\r\n  firstFocusable: null,\r\n  focusableContent: null,\r\n  lastFocusable: null,\r\n};\r\n\r\n// Event Listeners\r\nheader.addEventListener('click', checkHeaderClick);\r\nmain.addEventListener('click', checkMainClick);\r\nmain.addEventListener('change', checkMainChange);\r\nform.addEventListener('submit', verifyForm);\r\n\r\n// Event Checkers\r\nfunction checkHeaderClick({ target }) {\r\n  if (target.hasAttribute('data-toggle-menu') || target.hasAttribute('data-overlay')) {\r\n    return toggleMobileMenu();\r\n  }\r\n}\r\n\r\nfunction checkMainClick({ target }) {\r\n  isActive(nav) && toggleActive(nav);\r\n\r\n  if (target.hasAttribute('data-button-bookmark')) {\r\n    return toggleBookmark();\r\n  }\r\n\r\n  if (target.hasAttribute('data-cto-selection')) {\r\n    toggleTabindex();\r\n    openSelectionModal(target);\r\n    focusable.firstFocusable.focus();\r\n    return;\r\n  }\r\n\r\n  if (target.hasAttribute('data-close-selection') || target.hasAttribute('data-modal-selection')) {\r\n    return closeSelectionModal();\r\n  }\r\n\r\n  if (target.hasAttribute('data-button-select')) {\r\n    return selectedItem(target);\r\n  }\r\n}\r\n\r\nfunction checkMainChange({ target }) {\r\n  if (target.hasAttribute('data-reward-radio')) {\r\n    toggleTabindex(target);\r\n    rewardSelected(target);\r\n    return;\r\n  }\r\n}\r\n\r\n// Mobile Menu Navigation\r\nfunction toggleMobileMenu() {\r\n  toggleActive(nav);\r\n  const button = document.querySelector('[data-toggle-menu]');\r\n  const active = isActive(nav);\r\n\r\n  button.setAttribute('aria-expanded', active);\r\n  button.setAttribute('aria-pressed', active);\r\n  active && document.addEventListener('keydown', verifyKeyDown);\r\n  active || setClosing(nav);\r\n}\r\n\r\n// Bookmark Button\r\nfunction toggleBookmark() {\r\n  const bookmarked = !getData().bookmarked;\r\n  const html = document.documentElement;\r\n\r\n  setBookmarkData(bookmarked);\r\n  html.dataset.bookmark = bookmarked;\r\n  setToggleBookmarkAttributes();\r\n}\r\n\r\nfunction setBookmarkData(value) {\r\n  const data = getData();\r\n  data.bookmarked = value;\r\n  localStorage[directory] = JSON.stringify(data);\r\n}\r\n\r\nsetToggleBookmarkAttributes();\r\nfunction setToggleBookmarkAttributes() {\r\n  const { bookmarked } = getData();\r\n  const button = document.querySelector('[data-button-bookmark]');\r\n\r\n  button.setAttribute('aria-pressed', bookmarked);\r\n  if (bookmarked) {\r\n    button.setAttribute('aria-label', 'Remove bookmark');\r\n  } else {\r\n    button.setAttribute('aria-label', 'Add bookmark');\r\n  }\r\n}\r\n\r\n// Selection Modal\r\nfunction openSelectionModal(button) {\r\n  toggleActive(selectionModal);\r\n  reward.previousFocused = button;\r\n  selectionModal.setAttribute('aria-hidden', false);\r\n  document.addEventListener('keydown', verifyKeyDown);\r\n  setFocusable(selectionModal);\r\n}\r\n\r\nfunction closeSelectionModal() {\r\n  const { previousFocused } = reward;\r\n\r\n  toggleActive(selectionModal);\r\n  setClosing(selectionModal);\r\n  selectionModal.setAttribute('aria-hidden', true);\r\n  previousFocused.focus();\r\n}\r\n\r\nfunction rewardSelected(radioInput) {\r\n  reward.item && collapseContainer();\r\n  setReward(radioInput);\r\n  expandContainer();\r\n}\r\n\r\nfunction setReward(radioInput) {\r\n  reward.item = radioInput.closest('[data-reward-item]');\r\n  reward.container = reward.item.querySelector('[data-wrapper-grow]');\r\n  reward.content = reward.container.firstElementChild;\r\n}\r\n\r\nfunction expandContainer() {\r\n  toggleActive(reward.item);\r\n  setContainerHeight();\r\n  setResizeObserver();\r\n  toggleDisabled();\r\n  setFocusable(selectionModal);\r\n}\r\n\r\nfunction collapseContainer() {\r\n  toggleActive(reward.item);\r\n  setContainerHeight(0);\r\n  removeResizeObserver();\r\n  toggleDisabled();\r\n}\r\n\r\nfunction selectedItem(button) {\r\n  const value = button.dataset.buttonSelect;\r\n  const item = document.querySelector(`[data-reward-item='${value}']`);\r\n  const radioInput = item.querySelector('[data-reward-radio]');\r\n\r\n  toggleTabindex(radioInput);\r\n  openSelectionModal(button);\r\n  radioInput.checked = true;\r\n  radioInput.focus();\r\n  rewardSelected(radioInput);\r\n}\r\n\r\n// Helpers\r\nfunction toggleActive(element) {\r\n  element.classList.toggle('active');\r\n}\r\n\r\nfunction setClosing(element) {\r\n  element.classList.add('closing');\r\n  element.addEventListener(\r\n    'animationend',\r\n    () => {\r\n      element.classList.remove('closing');\r\n      document.removeEventListener('keydown', verifyKeyDown);\r\n      reward.item && resetSelectionModal();\r\n    },\r\n    { once: true }\r\n  );\r\n}\r\n\r\nfunction setContainerHeight(height = getContentHeight()) {\r\n  const { container } = reward;\r\n  container.style.maxHeight = `${height}px`;\r\n}\r\n\r\nfunction getContentHeight() {\r\n  const { height } = reward.content.getBoundingClientRect();\r\n  reward.contentHeight = height;\r\n  return height;\r\n}\r\n\r\nfunction verifyContentResize(entries) {\r\n  const elementBlockSize = entries[0].borderBoxSize[0].blockSize;\r\n  if (elementBlockSize === reward.contentHeight) return;\r\n  setContainerHeight();\r\n}\r\n\r\nfunction setResizeObserver() {\r\n  const { content } = reward;\r\n  observer.observe(content);\r\n}\r\n\r\nfunction removeResizeObserver() {\r\n  const { content } = reward;\r\n  observer.unobserve(content);\r\n}\r\n\r\nfunction toggleDisabled() {\r\n  const { content } = reward;\r\n  const inputs = content.querySelectorAll('input');\r\n\r\n  inputs.forEach(input => {\r\n    input.toggleAttribute('disabled');\r\n  });\r\n}\r\n\r\nfunction resetReward() {\r\n  for (const key in reward) {\r\n    if (isNaN(reward[key])) {\r\n      reward[key] = null;\r\n      continue;\r\n    }\r\n    reward[key] = 0;\r\n  }\r\n}\r\n\r\nfunction resetSelectionModal() {\r\n  collapseContainer();\r\n  resetReward();\r\n  form.reset();\r\n}\r\n\r\nfunction setSelectionModalFocus() {\r\n  const button = document.querySelector('[data-close-selection]');\r\n  button.focus();\r\n}\r\n\r\nfunction verifyKeyDown(evt) {\r\n  if (evt.key === 'Tab') return changeModalFocus(evt);\r\n\r\n  if (evt.key !== 'Escape') return;\r\n\r\n  if (isActive(nav)) return toggleMobileMenu();\r\n\r\n  if (isActive(selectionModal)) return closeSelectionModal();\r\n}\r\n\r\nfunction changeModalFocus(evt) {\r\n  const { firstFocusable, lastFocusable } = focusable;\r\n  const { activeElement } = document;\r\n  const { shiftKey } = evt;\r\n\r\n  // if shift + tab and first focusable element\r\n  if (shiftKey && activeElement === firstFocusable) {\r\n    lastFocusable.focus();\r\n    return evt.preventDefault();\r\n  }\r\n  // if only tab and last focusable element\r\n  if (!shiftKey && activeElement === lastFocusable) {\r\n    firstFocusable.focus();\r\n    evt.preventDefault();\r\n  }\r\n}\r\n\r\nfunction setFocusable(modal) {\r\n  const focusableElements = 'button:not([disabled]), input:not([disabled]):not([tabindex=\"-1\"])';\r\n  const elements = modal.querySelectorAll(focusableElements);\r\n  focusable.firstFocusable = elements[0];\r\n  focusable.focusableContent = elements;\r\n  focusable.lastFocusable = elements[elements.length - 1];\r\n}\r\n\r\nfunction toggleTabindex(target) {\r\n  const radios = [...form.querySelectorAll('[data-reward-radio]')];\r\n  target = target || radios[0];\r\n\r\n  radios.forEach(radio => {\r\n    if (radio === target) {\r\n      return target.removeAttribute('tabindex');\r\n    }\r\n    radio.setAttribute('tabindex', '-1');\r\n  });\r\n}\r\n\r\nfunction isActive(element) {\r\n  return element.classList.contains('active');\r\n}\r\n\r\nfunction verifyForm(evt) {\r\n  evt.preventDefault();\r\n  // const { submitter } = evt;\r\n  const { item } = reward;\r\n  const numberInput = item.querySelector('[data-number]');\r\n  const { value } = numberInput;\r\n  if (value.length === 0 || value === '') return;\r\n\r\n  updateProjectData(Number(value));\r\n  setBannerElementsData();\r\n  setRewardCardData(item.dataset);\r\n  return;\r\n  const { rewardItem } = item.dataset;\r\n  const data = getData();\r\n  const raised = document.querySelector('[data-raised]');\r\n  const backers = document.querySelector('[data-backers]');\r\n  const barProgress = document.querySelector('[data-bar-progress]');\r\n  const raisedValue = raised.dataset.raised;\r\n  const raisedTotal = Number(raisedValue) + Number(value);\r\n  const backersTotal = Number(backers.dataset.backers) + 1;\r\n  // const progress = raisedTotal >= 100000 ? '100%' : `${(raisedTotal / 100000) * 100}%`;\r\n\r\n  raised.innerText = Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD', maximumFractionDigits: 0 }).format(raisedTotal);\r\n  raised.dataset.raised = raisedTotal;\r\n  data.raisedTotal = raisedTotal;\r\n  backers.innerText = backersTotal;\r\n  backers.dataset.backers = backersTotal;\r\n  data.backersTotal = backersTotal;\r\n  barProgress.style.width = progress;\r\n\r\n  if (rewardItem !== '0') {\r\n    const selectors = `[data-reward-banner='${rewardItem}'] [data-remaining], [data-reward-item='${rewardItem}'] [data-remaining]`;\r\n    const remainings = document.querySelectorAll(selectors);\r\n    const remainingTotal = Number(remainings[0].dataset.remaining) - 1;\r\n\r\n    remainings.forEach(remaining => {\r\n      remaining.innerText = remainingTotal;\r\n      remaining.dataset.remaining = remainingTotal;\r\n    });\r\n  }\r\n  localStorage[directory] = JSON.stringify(data);\r\n}\r\n\r\nfunction updateProjectData(value) {\r\n  const data = getData();\r\n  const { raisedTotal } = data;\r\n\r\n  data.raisedTotal = raisedTotal + value;\r\n  data.backersTotal++;\r\n  localStorage[directory] = JSON.stringify(data);\r\n}\r\n\r\nsetBannerElementsData(true);\r\nfunction setBannerElementsData(init = false) {\r\n  const data = getData();\r\n  const { raisedTotal, backersTotal } = data;\r\n  const raised = document.querySelector('[data-raised]');\r\n  const backers = document.querySelector('[data-backers]');\r\n  const barProgress = document.querySelector('[data-bar-progress]');\r\n  const progress = raisedTotal >= 100000 ? '100%' : `${(raisedTotal / 100000) * 100}%`;\r\n\r\n  raised.innerText = Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD', maximumFractionDigits: 0 }).format(raisedTotal);\r\n  // raised.dataset.raised = raisedTotal;\r\n  backers.innerText = Intl.NumberFormat('en-US', { maximumFractionDigits: 0 }).format(backersTotal);\r\n  // backers.dataset.backers = backersTotal;\r\n  barProgress.style.width = progress;\r\n\r\n  if (!init) return;\r\n  const items = document.querySelectorAll('[data-reward-item]');\r\n  items.forEach(item => setRewardCardData(item.dataset));\r\n}\r\n\r\nfunction setRewardCardData({ rewardItem }) {\r\n  if (rewardItem === '0') return;\r\n  const selectors = `[data-reward-banner='${rewardItem}'] [data-remaining], [data-reward-item='${rewardItem}'] [data-remaining]`;\r\n  const remainings = document.querySelectorAll(selectors);\r\n  const remainingTotal = Number(remainings[0].dataset.remaining) - 1;\r\n\r\n  remainings.forEach(remaining => {\r\n    remaining.innerText = remainingTotal;\r\n    remaining.dataset.remaining = remainingTotal;\r\n  });\r\n}\r\n"],"file":"main.js"}