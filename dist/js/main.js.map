{"version":3,"names":[],"mappings":"","sources":["main.js"],"sourcesContent":["const header = document.querySelector('[data-header]');\r\nconst main = document.querySelector('[data-main]');\r\nconst selectionModal = document.querySelector('[data-modal-selection]');\r\nconst form = document.querySelector('[data-form]');\r\nconst rewardItem = {\r\n  selectedItem: null,\r\n  previousItem: null,\r\n  isActive: false,\r\n  wrapperGrow: null,\r\n  growChild: null,\r\n  childHeight: 0,\r\n};\r\n\r\nheader.addEventListener('click', checkHeaderClick);\r\nmain.addEventListener('click', checkMainClick);\r\nmain.addEventListener('change', checkMainChange);\r\nform.addEventListener('submit', evt => {\r\n  evt.preventDefault();\r\n});\r\n\r\nfunction checkHeaderClick({ target }) {\r\n  if (target.hasAttribute('data-toggle-menu') || target.hasAttribute('data-overlay')) {\r\n    return toggleMobileMenu();\r\n  }\r\n}\r\n\r\nfunction checkMainClick({ target }) {\r\n  if (target.hasAttribute('data-button-bookmark')) {\r\n    return toggleBookmark();\r\n  }\r\n  if (target.hasAttribute('data-cto-selection')) {\r\n    return openSelectionModal();\r\n  }\r\n  if (target.hasAttribute('data-close-selection')) {\r\n    return closeSelectionModal();\r\n  }\r\n  if (target.hasAttribute('data-modal-selection')) {\r\n    return closeSelectionModal();\r\n  }\r\n}\r\n\r\nfunction checkMainChange(evt) {\r\n  const { target } = evt;\r\n  if (target.hasAttribute('data-reward-radio')) {\r\n    rewardRadioSelected(target);\r\n    console.log(target.checked);\r\n  }\r\n}\r\n\r\n// Mobile Navigation Menu\r\nfunction toggleMobileMenu() {\r\n  const nav = document.querySelector('[data-nav]');\r\n  const button = document.querySelector('[data-toggle-menu]');\r\n\r\n  toggleActiveClass(nav);\r\n  const isActive = nav.classList.contains('active');\r\n\r\n  button.setAttribute('aria-expanded', isActive);\r\n  button.setAttribute('aria-pressed', isActive);\r\n  if (isActive) return;\r\n  nav.classList.add('closing');\r\n  nav.addEventListener('animationend', toggleClosingClass);\r\n}\r\n\r\n// Bookmark Button\r\nfunction toggleBookmark() {\r\n  const isBookmarked = !JSON.parse(localStorage.getItem('bookmark'));\r\n  const html = document.documentElement;\r\n\r\n  localStorage.setItem('bookmark', isBookmarked);\r\n  html.dataset.bookmark = isBookmarked;\r\n  setToggleBookmarkAttributes();\r\n}\r\n\r\nsetToggleBookmarkAttributes();\r\nfunction setToggleBookmarkAttributes() {\r\n  const isBookmarked = JSON.parse(localStorage.getItem('bookmark'));\r\n  const button = document.querySelector('[data-button-bookmark]');\r\n\r\n  button.setAttribute('aria-pressed', isBookmarked);\r\n  if (isBookmarked) {\r\n    button.setAttribute('aria-label', 'Remove bookmark');\r\n  } else {\r\n    button.setAttribute('aria-label', 'Add bookmark');\r\n  }\r\n}\r\n\r\n// Selection Modal\r\nfunction openSelectionModal() {\r\n  toggleActiveClass(selectionModal);\r\n  window.addEventListener('resize', setElementHeight);\r\n}\r\n\r\nfunction closeSelectionModal() {\r\n  toggleActiveClass(selectionModal);\r\n  selectionModal.classList.add('closing');\r\n  selectionModal.addEventListener('animationend', toggleClosingClass);\r\n}\r\n\r\nfunction rewardRadioSelected(radioButton) {\r\n  rewardItem.selectedItem = getParent(radioButton, 'data-reward-item');\r\n  rewardItem.previousItem = rewardItem.selectedItem;\r\n  rewardItem.isActive = true;\r\n  rewardItem.wrapperGrow = rewardItem.selectedItem.querySelector('[data-wrapper-grow]');\r\n  rewardItem.growChild = rewardItem.wrapperGrow.firstElementChild;\r\n  console.log(rewardItem.growChild);\r\n\r\n  toggleActiveClass(rewardItem.selectedItem);\r\n  setElementHeight();\r\n  console.log(rewardItem.wrapperGrow);\r\n}\r\n\r\n// Helpers\r\nfunction toggleActiveClass(element) {\r\n  element.classList.toggle('active');\r\n}\r\n\r\nfunction toggleClosingClass() {\r\n  this.classList.toggle('closing');\r\n  this.removeEventListener('animationend', toggleClosingClass);\r\n}\r\n\r\nfunction getParent(element, attribute) {\r\n  const parent = element.parentElement;\r\n  if (parent.hasAttribute(attribute)) return parent;\r\n  return getParent(parent, attribute);\r\n}\r\n\r\nfunction setElementHeight() {\r\n  const height = rewardItem.growChild.offsetHeight;\r\n  rewardItem.childHeight = height;\r\n\r\n  if (rewardItem.isActive) {\r\n    rewardItem.wrapperGrow.style.maxHeight = `${height}px`;\r\n  } else {\r\n    rewardItem.wrapperGrow.style.maxHeight = '0px';\r\n  }\r\n}\r\n"],"file":"main.js"}